{
	"info": {
		"_postman_id": "e61d63a2-6fd8-459b-a5da-3516700ee046",
		"name": "Magento Connect User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getAddresses",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_customer_logout}}",
									"host": [
										"{{domain}}{{endpoint_customer_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "getAddresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a413685b-7d1f-428c-b1af-6e17c1330912",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_get}}",
									"host": [
										"{{domain}}{{endpoint_address_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "customerLogin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_customer_login}}",
									"host": [
										"{{domain}}{{endpoint_customer_login}}"
									]
								},
								"description": "customerLogin"
							},
							"response": []
						},
						{
							"name": "getAddresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c6c0028-f9fd-4052-bc16-fabe0357a5cf",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Test if response is okay, with body and json\", function () {",
											"    pm.response.to.be.ok,",
											"    pm.response.to.be.with.body,",
											"    pm.response.to.be.json",
											"})",
											"",
											"pm.test(\"Make sure all required address data was properly set\", function() {",
											"    pm.expect(address.id).to.not.be.empty",
											"    pm.expect(address.id).to.be.a('string', 'Not a string provided!')",
											"})",
											"",
											"pm.test(\"Make sure all optional address data was properly set in the right format\", function() {",
											"    const generalKeys = [",
											"        'firstName',",
											"        'lastName',",
											"        'street1',",
											"        'street2',",
											"        'zipCode',",
											"        'city',",
											"        'province',",
											"        'country'",
											"        ]",
											"    generalKeys.map(function(item) {",
											"        if (address[item]) {",
											"            pm.expect(address[item]).to.be.a('string', item + ' - Not a string provided!')",
											"        }",
											"    })",
											"})",
											"",
											"pm.test(\"Make sure that tags are an array\", function() {",
											"    pm.expect(address.tags).to.be.a('array', 'Not a array provided!')",
											"})",
											"",
											"pm.test(\"Make sure that if customAttributes set, customAttributes are an object\", function() {",
											"    if (address.customAttributes) {",
											"        pm.expect(address.customAttributes).to.be.a('object', 'Not a object provided!')",
											"    }",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_get}}",
									"host": [
										"{{domain}}{{endpoint_address_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "addAddresses",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_customer_logout}}",
									"host": [
										"{{domain}}{{endpoint_customer_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "createAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc38f512-4152-4e41-8265-1247bc71ab14",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot create address\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dd4dec7-788a-4a91-aa70-86c077c80f47",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_address_add}}",
									"host": [
										"{{domain}}{{endpoint_address_add}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_customer_logout}}",
											"host": [
												"{{domain}}{{endpoint_customer_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_customer_login}}",
											"host": [
												"{{domain}}{{endpoint_customer_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								},
								{
									"name": "getUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "030eb4ac-544f-43a8-9441-d2f10454dbca",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.with.body;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response have minimum return values\", function() {",
													"    var response = pm.response.json()",
													"    pm.expect(response.id).to.not.be.empty;",
													"    pm.expect(response.firstName).to.not.be.empty;",
													"    pm.expect(response.lastName).to.not.be.empty;",
													"    pm.expect(response.mail).to.not.be.empty;",
													"})",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_get}}",
											"host": [
												"{{domain}}{{endpoint_user_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "Required fields not set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec6835ae-15f7-4e3d-884a-33282b663b8b",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Required data not set, should return EVALIDATION error\", function () {",
													"    pm.expect(jsonData.error.code).to.be.eq('EVALIDATION');",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"t1.firstname\",\n        \"lastName\": \"t1.lastname\",\n        \"street1\": \"Olvenstedter Straße\",\n        \"street2\": \"11a\",\n        \"city\": \"Magdeburg\",\n        \"zipCode\": \"t1.zip\",\n        \"country\": \"DE\",\n        \"province0\":\"\",\n        \"customAttributes\": {\n        \t\"company\": \"\",\n        \t\"phone\": \"t1.phone\",\n        \t\"fax\": \"\",\n        \t\"vatId\": \"\",\n        \t\"suffix\": \"\",\n        \t\"prefix\": \"\",\n        \t\"middleName\": \"\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5574bf6-ff64-40af-9f45-cdff9e56b000",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "90123661-725d-42d7-b44c-7113ef93e4d6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Simple",
							"item": [
								{
									"name": "create Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAddress and compare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f419251-54bf-4327-97e5-0e1ae87881b6",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that if tags set, tags are an array\", function() {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.be.a('array', 'Not a array provided!')",
													"    }",
													"})",
													"",
													"pm.test(\"Make sure that if customAttributes set, customAttributes are an object\", function() {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    if (address.customAttributes) {",
													"        pm.expect(address.customAttributes).to.be.a('object', 'Not a object provided!')",
													"    }",
													"})",
													"",
													"pm.test(\"Make sure all address data was properly set\", function() {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
													"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
													"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
													"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
													"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
													"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
													"    pm.expect(address.country).to.be.eq('US');",
													"    pm.expect(address.province).to.be.eq('AZ');",
													"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
													"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
													"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
													"    pm.expect(address.customAttributes.phone).to.be.eq(pm.environment.get(\"seed\") + '-phone');",
													"    pm.expect(address.customAttributes.fax).to.be.eq(pm.environment.get(\"seed\") + '-fax');",
													"    pm.expect(address.customAttributes.vatId).to.be.eq(pm.environment.get(\"seed\") + '-vatId');",
													"    pm.expect(address.customAttributes.middleName).to.be.eq(pm.environment.get(\"seed\") + '-middlename');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Default",
							"item": [
								{
									"name": "create default billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_billing\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check for default billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "612eb3db-148a-4b20-a73f-1b93a8d9f78b",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that default billing tag is set\", function() {",
													"    ",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.include('default_billing')",
													"    }",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create default shipping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default shipping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f87fc0c9-a214-4a4a-81b9-9377c96fd58b",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that default billing tag is set\", function() {",
													"    ",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.include('default_shipping')",
													"    }",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create default shipping+billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\",\n        \t\"default_billing\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cc9b29c-ca14-4bbd-a226-45151b3f4a3c",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that default billing tag is set\", function() {",
													"    ",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.include('default_shipping')",
													"        pm.expect(address.tags).to.include('default_billing')",
													"    }",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "deleteAddresses",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_customer_logout}}",
									"host": [
										"{{domain}}{{endpoint_customer_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "deleteAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc38f512-4152-4e41-8265-1247bc71ab14",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot create address\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dd4dec7-788a-4a91-aa70-86c077c80f47",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": {\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_customer_logout}}",
											"host": [
												"{{domain}}{{endpoint_customer_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_customer_login}}",
											"host": [
												"{{domain}}{{endpoint_customer_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								},
								{
									"name": "getUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27bbb375-7695-4d35-98c2-3ee3a639abc4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.with.body;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response have minimum return values\", function() {",
													"    var response = pm.response.json()",
													"    pm.expect(response.id).to.not.be.empty;",
													"    pm.expect(response.firstName).to.not.be.empty;",
													"    pm.expect(response.lastName).to.not.be.empty;",
													"    pm.expect(response.mail).to.not.be.empty;",
													"})",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_get}}",
											"host": [
												"{{domain}}{{endpoint_user_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create default shipping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df2147f6-47c8-4d87-b9e9-9c3001472804",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const defaultAddress = response.addresses.filter(address => address.tags.includes(\"default_shipping\")).pop();",
													"pm.environment.set(\"defaultAddressId\", defaultAddress.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create 1st address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e97c9d8-cb59-4a5c-8f79-5a935015ab81",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const address = response.addresses.pop();",
													"pm.environment.set(\"firstAddressId\", address.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create 2nd address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"phone\": \"{{seed}}-phone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vatId\": \"{{seed}}-vatId\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middleName\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_add}}",
											"host": [
												"{{domain}}{{endpoint_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32a71652-fb4a-42f3-b36d-d6cbe50121e0",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const address = response.addresses.pop();",
													"pm.environment.set(\"secondAddressId\", address.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_address_get}}",
											"host": [
												"{{domain}}{{endpoint_address_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "Delete default address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb4f0a42-a78e-4212-bb58-a5c07bd0eecf",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test('Code is EMAGENTOENDPOINTNOTALLOWED (405) because the address is default', function () {",
													"    pm.expect(jsonData.error.code).to.eql('EMAGENTOENDPOINTNOTALLOWED');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}}\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "No address ids given",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36a7b895-7a66-44f5-81d3-ecc913e99f8d",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EINVALIDCALL because no address ids were given\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Single with empty address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b98ded50-bbd1-44c3-99c4-2fec94302266",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EINVALIDCALL because an empty address id string was passed\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\"\"]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Multiple with empty address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1c2f1f8-4259-4e35-beec-44daea50a3a2",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EINVALIDCALL because no an empty address was passed, beside valid ones\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}},\n\t\t\"\"\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Multiple with default address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13c6da0e-a730-4831-bdba-078d4be01883",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EMAGENTOENDPOINTNOTALLOWED (405) because no an empty address was passed, beside valid ones\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EMAGENTOENDPOINTNOTALLOWED');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}},\n\t\t{{firstAddressId}}\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_addresses_delete}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5744c4f-b70f-4252-9e77-b6c032ddd1c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4efa29d-1418-43e6-a7f5-04fb3fd6fb2e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete multiple addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Addresses deleted and return is success true\", function () {",
											"    pm.expect(jsonData.success).to.be.eq(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressId}},\n\t\t{{secondAddressId}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check deletion + Cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4bc7744-50cc-460e-aa4e-606c87307f67",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Check if addresses were deleted\", function() {",
											"    var addresses = pm.response.json().addresses;",
											"",
											"    const filteredAddresses = addresses.filter(address => address.id === pm.environment.get(\"firstAddressId\") || address.id === pm.environment.get(\"secondAddressId\"));",
											"    pm.expect(filteredAddresses).to.be.empty;",
											"})",
											"",
											"pm.environment.unset(\"firstAddressId\");",
											"pm.environment.unset(\"secondAddressId\");",
											"pm.environment.unset(\"defaultAddressId\");",
											"pm.environment.unset(\"seed\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"variable": [
		{
			"id": "e9937db9-0f6a-4f8b-9d79-1ace462d7e66",
			"key": "domain",
			"value": "http://localhost:{{port}}",
			"type": "string"
		},
		{
			"id": "3bcd5266-d033-4ae1-9836-325646660851",
			"key": "port",
			"value": "8090",
			"type": "string"
		},
		{
			"id": "9578240c-58ad-40b4-9588-35cf8ad6cdf3",
			"key": "endpoint_address_get",
			"value": "/trustedPipelines/shopgate.user.getAddresses.v1",
			"type": "string"
		}
	]
}