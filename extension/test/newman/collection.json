{
	"info": {
		"_postman_id": "a3c68b53-3be3-4495-aaf8-0aadc3cc7018",
		"name": "Magento Connect User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getUser",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "getUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7620acbb-fe55-4c0f-9c8a-1510e5a81aab",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "customerLogin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								},
								"description": "customerLogin"
							},
							"response": []
						},
						{
							"name": "getUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e2ea238-404f-442b-b058-33222df18e6e",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const user = response;",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Test if response is okay, with body and json\", function() {",
											"    pm.response.to.be.ok,",
											"        pm.response.to.be.with.body,",
											"        pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Make sure all required user data was properly set\", function() {",
											"    pm.expect(user.id).to.be.a('string', 'ID - not a string provided!').to.not.be.empty;",
											"    pm.expect(user.mail).to.be.a('string', 'Mail - not a string provided!').to.not.be.empty;",
											"});",
											"",
											"pm.test(\"Make sure all optional string based user data was properly set in the right format\", function() {",
											"    const generalKeys = [",
											"        'firstName',",
											"        'lastName'",
											"    ];",
											"    generalKeys.map(function(item) {",
											"        pm.expect(user[item]).to.be.a('string', item + ' - Not a string provided!');",
											"    });",
											"});",
											"",
											"pm.test(\"Make sure the userGroups are set as array\", function() {",
											"    pm.expect(user.userGroups).to.be.a('array');",
											"});",
											"",
											"pm.test(\"Make sure the customAttributes are set as object\", function() {",
											"    pm.expect(user.customAttributes).to.be.a('object');",
											"});",
											"",
											"pm.test(\"Make sure that user Groups is set has an property id and name with the right string based value\", function() {",
											"    const testUserGroup = user.userGroups.pop();",
											"    pm.expect(testUserGroup).to.have.property('id');",
											"    pm.expect(testUserGroup).to.have.property('name');",
											"    pm.expect(testUserGroup.id).to.be.a('string', 'ID - not a string provided!');",
											"    pm.expect(testUserGroup.name).to.be.a('string', 'Name - not a string provided!');",
											"})",
											"",
											"pm.test(\"Make sure all default custom attributes properly exist\", function() {",
											"    const customAttributes = user.customAttributes;",
											"    const generalKeys = [",
											"        'created_at',",
											"        'updated_at',",
											"        'store_id',",
											"        'website_id',",
											"        'confirmation',",
											"        'created_in',",
											"        'default_billing',",
											"        'default_shipping',",
											"        'disable_auto_group_change',",
											"        'dob',",
											"        'gender',",
											"        'group_id',",
											"        'middlename',",
											"        'prefix',",
											"        'rp_token',",
											"        'rp_token_created_at',",
											"        'suffix',",
											"        'taxvat'",
											"    ];",
											"    generalKeys.map(function(item) {",
											"        pm.expect(customAttributes).to.have.property(item);",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "updateUser",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "updateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c59e0d2-9c64-4060-a5e7-c41a6a55be35",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot update data\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"firstname\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_update}}",
									"host": [
										"{{domain}}{{endpoint_user_update}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f22991b2-ca48-4839-af28-3da3c1f5a95f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c94927e0-b577-410f-a74c-2923e894a32a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_logout}}",
											"host": [
												"{{domain}}{{endpoint_user_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_login}}",
											"host": [
												"{{domain}}{{endpoint_user_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4c9044f5-41a9-42d3-8232-74fb3df87370",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "895587b1-e321-4f65-8441-892af4bb4cba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "empty required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7f63659-d2c8-4729-8181-8cf725ec559a",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the firstname is empty\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    })",
													"});",
													"",
													"pm.test(\"Correct firstname error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('firstName');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "742173d7-84fb-4207-85ae-a7e93e6fb17c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"firstName\": \"\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_update}}",
											"host": [
												"{{domain}}{{endpoint_user_update}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "no input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49674fc5-9e17-42a8-ab66-575229270df5",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because all inputs were missing\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "742173d7-84fb-4207-85ae-a7e93e6fb17c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_update}}",
											"host": [
												"{{domain}}{{endpoint_user_update}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e19c85f2-0033-4b62-86b1-b088f4411bb4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "064b68e5-42a4-496b-9159-f433d3daab02",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "EE",
							"item": [
								{
									"name": "update customAttributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9942243-a158-4f02-a860-004993f665ae",
												"type": "text/javascript",
												"exec": [
													"//Testing for EE edition specifics",
													"if (pm.variables.get(\"mage_type\") === 'EE') {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99f20e51-ac6e-45ef-bdd2-759f55979d6d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"customAttributes\": {\n\t\t\"dob\": \"1902/01/01\",\n\t\t\"gender\": \"1\"\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_update}}",
											"host": [
												"{{domain}}{{endpoint_user_update}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check updated data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9e72131-e296-4df5-ba3c-f445df31bda5",
												"type": "text/javascript",
												"exec": [
													"//Testing for EE edition specifics",
													"var jsonData = pm.response.json();",
													"if (pm.variables.get(\"mage_type\") === 'EE') {",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Test if repsonse is okay, with body and json\", function () {",
													"        pm.response.to.be.ok;",
													"        pm.response.to.be.with.body;",
													"        pm.response.to.be.json;",
													"    });",
													"",
													"    pm.test(\"Data was updated\", function() {",
													"        var response = pm.response.json()",
													"        pm.expect(response.customAttributes.gender).to.eql(\"1\");",
													"        pm.expect(response.customAttributes.dob).to.eql(\"1902-01-01 00:00:00\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_get}}",
											"host": [
												"{{domain}}{{endpoint_user_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "update simple data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f1dbd16-cd35-46ad-8414-547ac9c5141a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "372abd2d-4751-42fa-9d2d-fedabb295bef",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"user-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_update}}",
									"host": [
										"{{domain}}{{endpoint_user_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check updated data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91eb703d-9b34-437a-ad54-f4f7e966d31b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.with.body;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Data was updated\", function() {",
											"    var response = pm.response.json()",
											"    pm.expect(response.firstName).to.eql(pm.environment.get(\"seed\") + \"-firstname\");",
											"    pm.expect(response.lastName).to.eql(pm.environment.get(\"seed\") + \"-lastname\");",
											"    ",
											"    pm.environment.set(\"updatedFirstName\", response.firstName);",
											"    pm.environment.set(\"updatedLastName\", response.lastName);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update customAttributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f1dbd16-cd35-46ad-8414-547ac9c5141a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "372abd2d-4751-42fa-9d2d-fedabb295bef",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"user-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"customAttributes\": {\n\t\t\"middlename\": \"{{seed}}-middlename\"\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_update}}",
									"host": [
										"{{domain}}{{endpoint_user_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check updated customAttributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b781b16-9077-4fc9-a54f-fa1777150d93",
										"type": "text/javascript",
										"exec": [
											"var response = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.with.body;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Data was updated\", function() {",
											"    pm.expect(response.customAttributes.middlename).to.eql(pm.environment.get(\"seed\") + \"-middlename\");",
											"})",
											"",
											"pm.test(\"Firstname and lastname NOT updated\", function() {",
											"    pm.expect(response.firstName).to.eql(pm.environment.get(\"updatedFirstName\"));",
											"    pm.expect(response.lastName).to.eql(pm.environment.get(\"updatedLastName\"));",
											"})",
											"",
											"pm.environment.unset(\"updatedFirstName\");",
											"pm.environment.unset(\"updatedLastName\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "getAddresses",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "getAddresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a413685b-7d1f-428c-b1af-6e17c1330912",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot retrieve data\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "customerLogin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								},
								"description": "customerLogin"
							},
							"response": []
						},
						{
							"name": "getAddresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c6c0028-f9fd-4052-bc16-fabe0357a5cf",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const address = response.addresses.pop();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Test if response is okay, with body and json\", function () {",
											"    pm.response.to.be.ok,",
											"    pm.response.to.be.with.body,",
											"    pm.response.to.be.json",
											"})",
											"",
											"pm.test(\"Make sure all required address data was properly set\", function() {",
											"    pm.expect(address.id).to.not.be.empty",
											"    pm.expect(address.id).to.be.a('string', 'Not a string provided!')",
											"})",
											"",
											"pm.test(\"Make sure all optional address data was properly set in the right format\", function() {",
											"    const generalKeys = [",
											"        'firstName',",
											"        'lastName',",
											"        'street1',",
											"        'street2',",
											"        'zipCode',",
											"        'city',",
											"        'province',",
											"        'country'",
											"        ]",
											"    generalKeys.map(function(item) {",
											"        if (address[item]) {",
											"            pm.expect(address[item]).to.be.a('string', item + ' - Not a string provided!')",
											"        }",
											"    })",
											"})",
											"",
											"pm.test(\"Make sure that tags are an array\", function() {",
											"    pm.expect(address.tags).to.be.a('array', 'Not a array provided!')",
											"})",
											"",
											"pm.test(\"Make sure that if customAttributes set, customAttributes are an object\", function() {",
											"    if (address.customAttributes) {",
											"        pm.expect(address.customAttributes).to.be.a('object', 'Not a object provided!')",
											"    }",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "addAddresses",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "createAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc38f512-4152-4e41-8265-1247bc71ab14",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot create address\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dd4dec7-788a-4a91-aa70-86c077c80f47",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_add}}",
									"host": [
										"{{domain}}{{endpoint_user_address_add}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_logout}}",
											"host": [
												"{{domain}}{{endpoint_user_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_login}}",
											"host": [
												"{{domain}}{{endpoint_user_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "Required fields not set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "656c101a-71c9-43dd-82d6-a3272474c25f",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test('Required data not set, should return EVALIDATION error', function () {",
													"    pm.expect(jsonData.error.code).to.be.eq('EVALIDATION');",
													"    pm.expect(jsonData.error.validationErrors).to.be.a('array').to.not.be.empty;",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(7);",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"\",\n        \"lastName\": \"\",\n        \"street1\": \"\",\n        \"street2\": \"\",\n        \"city\": \"\",\n        \"zipCode\": \"\",\n        \"country\": \"\",\n        \"province\":\"\",\n        \"customAttributes\": {\n        \t\"company\": \"\",\n        \t\"telephone\": \"\",\n        \t\"fax\": \"\",\n        \t\"vat_id\": \"\",\n        \t\"suffix\": \"\",\n        \t\"prefix\": \"\",\n        \t\"middlename\": \"\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5574bf6-ff64-40af-9f45-cdff9e56b000",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "90123661-725d-42d7-b44c-7113ef93e4d6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Simple",
							"item": [
								{
									"name": "create Address",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "getAddress and compare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc5a380a-de75-487f-ab7f-a679f2a69148",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that if tags set, tags are an array\", function() {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.be.a('array', 'Not a array provided!')",
													"    }",
													"})",
													"",
													"pm.test(\"Make sure that if customAttributes set, customAttributes are an object\", function() {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    if (address.customAttributes) {",
													"        pm.expect(address.customAttributes).to.be.a('object', 'Not a object provided!')",
													"    }",
													"})",
													"",
													"pm.test(\"Make sure all address data was properly set\", function() {",
													"    const response = pm.response.json();",
													"    const address = response.addresses.pop();",
													"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
													"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
													"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
													"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
													"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
													"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
													"    pm.expect(address.country).to.be.eq('US');",
													"    pm.expect(address.province).to.be.eq('AZ');",
													"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
													"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
													"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
													"    pm.expect(address.customAttributes.telephone).to.be.eq(pm.environment.get(\"seed\") + '-telephone');",
													"    pm.expect(address.customAttributes.fax).to.be.eq(pm.environment.get(\"seed\") + '-fax');",
													"    pm.expect(address.customAttributes.vat_id).to.be.eq(pm.environment.get(\"seed\") + '-vat_id');",
													"    if (address.customAttributes.hasOwnProperty(\"middlename\")) {",
													"        pm.expect(address.customAttributes.middlename).to.be.eq(pm.environment.get(\"seed\") + '-middlename');",
													"    }",
													"    if (address.customAttributes.hasOwnProperty(\"prefix\")) {",
													"        pm.expect(address.customAttributes.prefix).to.be.eq(pm.environment.get(\"seed\") + '-prefix');",
													"    }",
													"    if (address.customAttributes.hasOwnProperty(\"suffix\")) {",
													"        pm.expect(address.customAttributes.suffix).to.be.eq(pm.environment.get(\"seed\") + '-suffix');",
													"    }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Default",
							"item": [
								{
									"name": "create default billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_billing\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check for default billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "612eb3db-148a-4b20-a73f-1b93a8d9f78b",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that default billing tag is set\", function() {",
													"    ",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.include('default_billing')",
													"    }",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create default shipping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default shipping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f87fc0c9-a214-4a4a-81b9-9377c96fd58b",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that default billing tag is set\", function() {",
													"    ",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.include('default_shipping')",
													"    }",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create default shipping+billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\",\n        \t\"default_billing\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cc9b29c-ca14-4bbd-a226-45151b3f4a3c",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"const address = response.addresses.pop();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Make sure that default billing tag is set\", function() {",
													"    ",
													"    if (address.tags) {",
													"        pm.expect(address.tags).to.include('default_shipping')",
													"        pm.expect(address.tags).to.include('default_billing')",
													"    }",
													"})"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "updateAddress",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "updateAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e019dbcd-fea7-430f-b2e5-cd2005d668ba",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot update address\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dd4dec7-788a-4a91-aa70-86c077c80f47",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"1\",\n    \"firstName\": \"firstname\",\n    \"lastName\": \"lastname\",\n    \"street1\": \"street1\",\n    \"street2\": \"street2\",\n    \"city\": \"city\",\n    \"zipCode\": \"zipCode\",\n    \"country\": \"EE\",\n    \"province\":\"province\",\n    \"customAttributes\": {\n        \"company\": \"company\",\n        \"telephone\": \"telephone\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_update}}",
									"host": [
										"{{domain}}{{endpoint_user_address_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_logout}}",
											"host": [
												"{{domain}}{{endpoint_user_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_login}}",
											"host": [
												"{{domain}}{{endpoint_user_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								},
								{
									"name": "create address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch address Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba0deede-6e55-40d8-8a50-65c736977780",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const address = response.addresses.pop();",
													"pm.environment.set(\"updateAddressId\", address.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "bad country name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38cf687e-9a7d-4066-8c05-b981098cd3ef",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EVALIDATION because the address is duplicate\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test(\"Incorrect validation error structure\", function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.gte(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    });",
													"});",
													"",
													"pm.test(\"Correct country error is shown\", function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('country');",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99ab1c7c-2b5b-463f-8f16-b3cb23a02748",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{updateAddressId}}\",\n    \"country\": \"TESTER\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_update}}",
											"host": [
												"{{domain}}{{endpoint_user_address_update}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "update all fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bff324a6-6224-4a29-b826-09c0fc8aa1a4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Address successfully updated\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.eql(true);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f690a69f-a8f8-4958-a885-ceb326e6935d",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{updateAddressId}}\",\n    \"firstName\": \"{{seed}}-firstname\",\n    \"lastName\": \"{{seed}}-lastname\",\n    \"street1\": \"{{seed}}-street1\",\n    \"street2\": \"{{seed}}-street2\",\n    \"city\": \"{{seed}}-city\",\n    \"zipCode\": \"{{seed}}-zipCode\",\n    \"country\": \"US\",\n    \"province\":\"TX\",\n    \"customAttributes\": {\n        \"company\": \"{{seed}}-company\",\n        \"telephone\": \"{{seed}}-telephone\",\n        \"middlename\": \"{{seed}}-middlename\",\n        \"fax\": \"{{seed}}-fax\",\n        \"vat_id\": \"{{seed}}-vat_id\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_update}}",
									"host": [
										"{{domain}}{{endpoint_user_address_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check updated fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f78e519-a47d-47d6-93c6-e8a1eb8671bc",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Make sure all address data was properly changed\", function() {",
											"    const response = pm.response.json();",
											"    const address = response.addresses.filter(address => address.id === pm.environment.get(\"updateAddressId\")).pop();",
											"    pm.expect(address.firstName).to.be.eq(pm.environment.get(\"seed\") + '-firstname');",
											"    pm.expect(address.lastName).to.be.eq(pm.environment.get(\"seed\") + '-lastname');",
											"    pm.expect(address.street1).to.be.eq(pm.environment.get(\"seed\") + '-street1');",
											"    pm.expect(address.street2).to.be.eq(pm.environment.get(\"seed\") + '-street2');",
											"    pm.expect(address.city).to.be.eq(pm.environment.get(\"seed\") + '-city');",
											"    pm.expect(address.zipCode).to.be.eq(pm.environment.get(\"seed\") + '-zipCode');",
											"    pm.expect(address.country).to.be.eq('US');",
											"    pm.expect(address.province).to.be.eq('TX');",
											"    pm.expect(address.tags).to.be.a('array').to.be.empty;",
											"    pm.expect(address.customAttributes).to.be.a('object').to.not.be.empty;",
											"    pm.expect(address.customAttributes.company).to.be.eq(pm.environment.get(\"seed\") + '-company');",
											"    pm.expect(address.customAttributes.telephone).to.be.eq(pm.environment.get(\"seed\") + '-telephone');",
											"    pm.expect(address.customAttributes.fax).to.be.eq(pm.environment.get(\"seed\") + '-fax');",
											"    pm.expect(address.customAttributes.vat_id).to.be.eq(pm.environment.get(\"seed\") + '-vat_id');",
											"    if (address.customAttributes.hasOwnProperty(\"middlename\")) {",
											"        pm.expect(address.customAttributes.middlename).to.be.eq(pm.environment.get(\"seed\") + '-middlename');",
											"    }",
											"    if (address.customAttributes.hasOwnProperty(\"prefix\")) {",
											"        pm.expect(address.customAttributes.prefix).to.be.eq(pm.environment.get(\"seed\") + '-prefix');",
											"    }",
											"    if (address.customAttributes.hasOwnProperty(\"suffix\")) {",
											"        pm.expect(address.customAttributes.suffix).to.be.eq(pm.environment.get(\"seed\") + '-suffix');",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update default billing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5696e0-eed6-4a74-997c-43f6425af1b8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Address successfully updated\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.eql(true);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f690a69f-a8f8-4958-a885-ceb326e6935d",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{updateAddressId}}\",\n\t\"country\": \"US\",\n\t\"province\": \"AZ\",\n    \"tags\": [\n        \"default_billing\"\n    ]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_address_update}}",
									"host": [
										"{{domain}}{{endpoint_user_address_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check default billing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a251f37-3e9b-4aa5-8dda-b08622cd61ff",
										"type": "text/javascript",
										"exec": [
											"const response = pm.response.json();",
											"const defaultAddress = response.addresses.filter(address => address.tags.includes(\"default_billing\")).pop();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Make sure that default billing was updated\", function() {",
											"    pm.expect(defaultAddress.id).to.eql(pm.environment.get(\"updateAddressId\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "deleteAddresses",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "deleteAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc38f512-4152-4e41-8265-1247bc71ab14",
										"type": "text/javascript",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"User not logged in error, cannot create address\", function () {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dd4dec7-788a-4a91-aa70-86c077c80f47",
										"type": "text/javascript",
										"exec": [
											"// Create a seed to have a randomized data set",
											"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": {\n\t}\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_logout}}",
											"host": [
												"{{domain}}{{endpoint_user_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_login}}",
											"host": [
												"{{domain}}{{endpoint_user_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								},
								{
									"name": "create default shipping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [\n        \t\"default_shipping\"\n        ],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch default address Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df2147f6-47c8-4d87-b9e9-9c3001472804",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const defaultAddress = response.addresses.filter(address => address.tags.includes(\"default_shipping\")).pop();",
													"pm.environment.set(\"defaultAddressId\", defaultAddress.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create 1st address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch address Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e97c9d8-cb59-4a5c-8f79-5a935015ab81",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const address = response.addresses.pop();",
													"pm.environment.set(\"firstAddressId\", address.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create 2nd address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5fc2e8-4abd-4b29-b092-4579cf8425bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63a3d6a-e982-4bec-ba51-057d472f1a1b",
												"type": "text/javascript",
												"exec": [
													"// Create a seed to have a randomized data set",
													"pm.environment.set(\"seed\", \"address-\" + Math.floor(Math.random() * Math.floor(1000)));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"address\": {\n\t\t\"firstName\": \"{{seed}}-firstname\",\n        \"lastName\": \"{{seed}}-lastname\",\n        \"street1\": \"{{seed}}-street1\",\n        \"street2\": \"{{seed}}-street2\",\n        \"city\": \"{{seed}}-city\",\n        \"zipCode\": \"{{seed}}-zipCode\",\n        \"country\": \"US\",\n        \"province\":\"AZ\",\n        \"tags\": [],\n        \"customAttributes\": {\n        \t\"company\": \"{{seed}}-company\",\n        \t\"telephone\": \"{{seed}}-telephone\",\n        \t\"fax\": \"{{seed}}-fax\",\n        \t\"vat_id\": \"{{seed}}-vat_id\",\n        \t\"suffix\": \"{{seed}}-suffix\",\n        \t\"prefix\": \"{{seed}}-prefix\",\n        \t\"middlename\": \"{{seed}}-middlename\"\n        }\n\t}\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_address_add}}",
											"host": [
												"{{domain}}{{endpoint_user_address_add}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32a71652-fb4a-42f3-b36d-d6cbe50121e0",
												"type": "text/javascript",
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"const address = response.addresses.pop();",
													"pm.environment.set(\"secondAddressId\", address.id);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_get}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_get}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "Delete default address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb4f0a42-a78e-4212-bb58-a5c07bd0eecf",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test('Code is EMAGENTOENDPOINTNOTALLOWED (405) because the address is default', function () {",
													"    pm.expect(jsonData.error.code).to.eql('EMAGENTOENDPOINTNOTALLOWED');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}}\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "No address ids given",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36a7b895-7a66-44f5-81d3-ecc913e99f8d",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EINVALIDCALL because no address ids were given\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Single with empty address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b98ded50-bbd1-44c3-99c4-2fec94302266",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EINVALIDCALL because an empty address id string was passed\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\"\"]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Multiple with empty address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed2a491f-e24a-459c-aed9-5bbc07195f82",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EINVALIDCALL because not an empty address was passed, beside valid ones\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EINVALIDCALL');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}},\n\t\t\"\"\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_delete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Multiple with default address id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c28b0a68-1b66-467e-8c49-0bd2fe650b2f",
												"type": "text/javascript",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Code is EMAGENTOENDPOINTNOTALLOWED (405) could not delete at least one address.\", function () {",
													"    pm.expect(jsonData.error.code).to.eql('EMAGENTOENDPOINTNOTALLOWED');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ids\": [\n\t\t{{defaultAddressId}},\n\t\t{{firstAddressId}}\n\t]\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
											"host": [
												"{{domain}}{{endpoint_user_addresses_delete}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5744c4f-b70f-4252-9e77-b6c032ddd1c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4efa29d-1418-43e6-a7f5-04fb3fd6fb2e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete multiple addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Addresses deleted and return is success true\", function () {",
											"    pm.expect(jsonData.success).to.be.eq(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ids\": [\n\t\t{{firstAddressId}},\n\t\t{{secondAddressId}}\n\t]\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_delete}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check deletion + Cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4bc7744-50cc-460e-aa4e-606c87307f67",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Check if addresses were deleted\", function() {",
											"    var addresses = pm.response.json().addresses;",
											"",
											"    const filteredAddresses = addresses.filter(address => address.id === pm.environment.get(\"firstAddressId\") || address.id === pm.environment.get(\"secondAddressId\"));",
											"    pm.expect(filteredAddresses).to.be.empty;",
											"})",
											"",
											"pm.environment.unset(\"firstAddressId\");",
											"pm.environment.unset(\"secondAddressId\");",
											"pm.environment.unset(\"defaultAddressId\");",
											"pm.environment.unset(\"seed\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_addresses_get}}",
									"host": [
										"{{domain}}{{endpoint_user_addresses_get}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "updatePassword",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "attempt at updating",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f593ae7e-73d5-4af9-8c60-f2e7a7d6315c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"User not logged in error\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"newPass\",\n\t\"oldPassword\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "customer login",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_login}}",
											"host": [
												"{{domain}}{{endpoint_user_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								},
								{
									"name": "empty data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe36230e-1c40-455b-8e8f-8bc6439b0c4b",
												"type": "text/javascript",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test('Code is EVALIDATION', function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test('Incorrect validation error structure', function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(2);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    });",
													"});",
													"",
													"pm.test('Incorrect path errors are shown', function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('oldPassword');",
													"    pm.expect(jsonData.error.validationErrors[1].path).to.be.eq('password');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"password\": \"\",\n\t\"oldPassword\": \"\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_password_update}}",
											"host": [
												"{{domain}}{{endpoint_user_password_update}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "update password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec8d5938-de45-46b3-95a8-df38c6ba1226",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88a7a37a-3613-4b5f-90d3-7866eb682dfd",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set('temp-password', pm.environment.get('password') + '-12345');"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{temp-password}}\",\n\t\"oldPassword\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "cannot get customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e552004-891e-49bb-a719-ab3a6eae98ad",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('User not logged in error', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cannot login with old",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0aa4f4f-2309-4e14-b5ee-fbbfa03b51e9",
										"type": "text/javascript",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test('Bad credentials provided', function() {",
											"    pm.expect(jsonData.error.code).to.be.eq('EINVALIDCREDENTIALS');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								},
								"description": "customerLogin"
							},
							"response": []
						},
						{
							"name": "login with new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f781017-7f23-4431-8e50-c1fb3cd115cb",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{temp-password}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_login}}",
									"host": [
										"{{domain}}{{endpoint_user_login}}"
									]
								},
								"description": "customerLogin"
							},
							"response": []
						},
						{
							"name": "reset pass + cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06ed9d1a-fffe-43f4-9b2e-6586267f02dd",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.unset('temp-password');"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "380aa0c2-0445-4253-b8fd-c8ae3f6a2801",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"{{password}}\",\n\t\"oldPassword\": \"{{temp-password}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_password_update}}",
									"host": [
										"{{domain}}{{endpoint_user_password_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "updateEmail",
			"item": [
				{
					"name": "guest",
					"item": [
						{
							"name": "customerLogout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_logout}}",
									"host": [
										"{{domain}}{{endpoint_user_logout}}"
									]
								},
								"description": "customerLogout"
							},
							"response": []
						},
						{
							"name": "updateEmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f593ae7e-73d5-4af9-8c60-f2e7a7d6315c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"User not logged in error\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.code).to.be.eq('EACCESS');",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mail\": \"example@shopgate.com\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_email_update}}",
									"host": [
										"{{domain}}{{endpoint_user_email_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "customer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "customerLogout",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_logout}}",
											"host": [
												"{{domain}}{{endpoint_user_logout}}"
											]
										},
										"description": "customerLogout"
									},
									"response": []
								},
								{
									"name": "customerLogin",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"strategy\": \"basic\",\n    \"parameters\": {\n        \"login\": \"{{username}}\",\n        \"password\": \"{{password}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_login}}",
											"host": [
												"{{domain}}{{endpoint_user_login}}"
											]
										},
										"description": "customerLogin"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4c9044f5-41a9-42d3-8232-74fb3df87370",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "895587b1-e321-4f65-8441-892af4bb4cba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Errors",
							"item": [
								{
									"name": "wrong email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a54217f2-9b2e-48a6-95de-870fb838e93d",
												"type": "text/javascript",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test('Code is EVALIDATION', function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test('Incorrect validation error structure', function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    });",
													"});",
													"",
													"pm.test('Incorrect path errors are shown', function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('email');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"mail\": \"wrongmailformat\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_email_update}}",
											"host": [
												"{{domain}}{{endpoint_user_email_update}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "empty email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab295062-5d55-45c6-9622-291509198338",
												"type": "text/javascript",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.test('Code is EVALIDATION', function () {",
													"    pm.expect(jsonData.error.code).to.eql('EVALIDATION');",
													"});",
													"",
													"pm.test('Incorrect validation error structure', function () {",
													"    pm.expect(jsonData.error.validationErrors.length).to.be.eq(1);",
													"    jsonData.error.validationErrors.forEach((error) => {",
													"        pm.expect(error.path).to.not.be.empty;",
													"        pm.expect(error.message).to.not.be.empty;",
													"    });",
													"});",
													"",
													"pm.test('Incorrect path errors are shown', function () {",
													"    pm.expect(jsonData.error.validationErrors[0].path).to.be.eq('email');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"mail\": \"\"\n}"
										},
										"url": {
											"raw": "{{domain}}{{endpoint_user_email_update}}",
											"host": [
												"{{domain}}{{endpoint_user_email_update}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "update email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec8d5938-de45-46b3-95a8-df38c6ba1226",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15b92979-0a22-42b2-8133-f5a3e922dcc2",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set('temp-email', '12345-' + pm.environment.get('username'));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mail\": \"{{temp-email}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_email_update}}",
									"host": [
										"{{domain}}{{endpoint_user_email_update}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check updated email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaf52781-ee12-4c05-9c53-6f7c1b64f734",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test if repsonse is okay, with body and json\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.with.body;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Email has been updated\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.mail).to.eql(pm.environment.get(\"temp-email\"));",
											"})"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_get}}",
									"host": [
										"{{domain}}{{endpoint_user_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset email + cleanup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02c16eb8-379a-4557-bfde-c45642657ee1",
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.unset('temp-email');"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "380aa0c2-0445-4253-b8fd-c8ae3f6a2801",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mail\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{domain}}{{endpoint_user_email_update}}",
									"host": [
										"{{domain}}{{endpoint_user_email_update}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e7ac9d42-e9d7-4711-ad81-14d5f8a27d6f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f31e6824-9fd3-4604-9ae2-47b0112bce02",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"id": "e9937db9-0f6a-4f8b-9d79-1ace462d7e66",
			"key": "domain",
			"value": "http://localhost:{{port}}",
			"type": "string"
		},
		{
			"id": "3bcd5266-d033-4ae1-9836-325646660851",
			"key": "port",
			"value": "8090",
			"type": "string"
		},
		{
			"id": "9578240c-58ad-40b4-9588-35cf8ad6cdf3",
			"key": "endpoint_user_addresses_get",
			"value": "/trustedPipelines/shopgate.user.getAddresses.v1",
			"type": "string"
		}
	]
}